//------------------------------------------------------------------------------
// <auto-generated>
//    Este código se generó a partir de una plantilla.
//
//    Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//    Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Facturacion.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class FacturaEntities : DbContext
    {
        public FacturaEntities()
            : base("name=FacturaEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<Clientes> Clientes { get; set; }
        public DbSet<EncabezadoRecibo> EncabezadoRecibo { get; set; }
        public DbSet<EncabezafoFactura> EncabezafoFactura { get; set; }
        public DbSet<DetalleRecibo> DetalleRecibo { get; set; }
    
        public virtual ObjectResult<RecibosSelect_Result> RecibosSelect()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RecibosSelect_Result>("RecibosSelect");
        }
    
        public virtual int InsertCliente(string nombreC, Nullable<int> saldo, Nullable<int> abonosMes)
        {
            var nombreCParameter = nombreC != null ?
                new ObjectParameter("NombreC", nombreC) :
                new ObjectParameter("NombreC", typeof(string));
    
            var saldoParameter = saldo.HasValue ?
                new ObjectParameter("Saldo", saldo) :
                new ObjectParameter("Saldo", typeof(int));
    
            var abonosMesParameter = abonosMes.HasValue ?
                new ObjectParameter("AbonosMes", abonosMes) :
                new ObjectParameter("AbonosMes", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertCliente", nombreCParameter, saldoParameter, abonosMesParameter);
        }
    
        public virtual ObjectResult<ClienteID_Result> ClienteID(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ClienteID_Result>("ClienteID", idParameter);
        }
    
        public virtual int ModificarCliente(Nullable<int> id, string nombreC, Nullable<int> saldo, Nullable<int> abonosMes)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var nombreCParameter = nombreC != null ?
                new ObjectParameter("NombreC", nombreC) :
                new ObjectParameter("NombreC", typeof(string));
    
            var saldoParameter = saldo.HasValue ?
                new ObjectParameter("Saldo", saldo) :
                new ObjectParameter("Saldo", typeof(int));
    
            var abonosMesParameter = abonosMes.HasValue ?
                new ObjectParameter("AbonosMes", abonosMes) :
                new ObjectParameter("AbonosMes", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ModificarCliente", idParameter, nombreCParameter, saldoParameter, abonosMesParameter);
        }
    
        public virtual ObjectResult<MuestraLosCientes_Result> MuestraLosCientes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MuestraLosCientes_Result>("MuestraLosCientes");
        }
    
        public virtual ObjectResult<MuestraCliente_Result> MuestraCliente()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MuestraCliente_Result>("MuestraCliente");
        }
    
        public virtual int AgregaRecibo(Nullable<int> code, Nullable<int> monto, Nullable<int> factura)
        {
            var codeParameter = code.HasValue ?
                new ObjectParameter("code", code) :
                new ObjectParameter("code", typeof(int));
    
            var montoParameter = monto.HasValue ?
                new ObjectParameter("Monto", monto) :
                new ObjectParameter("Monto", typeof(int));
    
            var facturaParameter = factura.HasValue ?
                new ObjectParameter("Factura", factura) :
                new ObjectParameter("Factura", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AgregaRecibo", codeParameter, montoParameter, facturaParameter);
        }
    
        public virtual ObjectResult<MuestralasFacturasCLIENTE_Result> MuestralasFacturasCLIENTE(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MuestralasFacturasCLIENTE_Result>("MuestralasFacturasCLIENTE", idParameter);
        }
    }
}
